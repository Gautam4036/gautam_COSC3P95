#include <iostream>
using namespace std;

/* This method fills our array with random numbers those are between the value minValue and maxValue*/
void generateRandomTestCase(int arr[], int size, int minValue, int maxValue)
{
    for (int i = 0; i < size; i++)
    {
        arr[i] = minValue + (rand() % (maxValue - minValue + 1)); // Generates random size between minValue and maxValue
    }
}

/*this method sorts the array in ascending order by bubblesort*/

void bubbleSort(int arr[], int size)
{
    bool swapped;
    do
    {
        swapped = false;
        for (int i = 1; i < size; i++)
        {
            if (arr[i - 1] > arr[i])
            {
                swap(arr[i - 1], arr[i]);
                swapped = true;
            }
        }
        size--;
    } while (swapped);
}

int main()
{
    int numTests = 10; // number of test cases you want to run
    int size, minValue, maxValue;

    for (int i = 1; i <= numTests; i++)
    {                           // loops for whatever number of tests you have selected
        size = rand() % 20 + 1; // Random size of array between 1 and 20
        minValue = -100;        // Minimum possible value you want for integers in the array
        maxValue = 100;         // Maximum possible value you want for integers in the array

        int input[size];                                         // generating an array of size(between 1 and 20) generated by random number generated
        generateRandomTestCase(input, size, minValue, maxValue); // calling our function to fill array with random numbers

        int original[size]; // generating an array same as input array to copy the input array to use it for printing later (to show both sorted and unsorted versions)

        for (int j = 0; j < size; j++)
        { // copying the data from input array to original array
            original[j] = input[j];
        }

        bubbleSort(input, size); // Calling our sorting algo. which makes changes to input array

        bool sorted = true;
        for (int j = 1; j < size; j++)
        { // this is basically a check if the loop was actually sorted properly or not

            if (input[j] < input[j - 1])
            { // compares the elememts in sorted array if each succeeding element is smaller than prev one

                sorted = false; // as soon as we find that a succeeding element is smaller than prev one, set bool sorted equal to false and break
                break;
            }
        } // if for all the elements, a succeeding element is never smaller than prev one (which means array is sorted), keep bool sorted set to true

        // below is the condition to check if it was sorted or not and then print both original and inputed (sorted) array

        if (sorted)
        { // if it was actually sorted
            cout << "Test Case No. : " << i << " and "
                 << "Size of array is: " << size << " and this Test Passed" << endl;
            cout << "Input: ";
            for (int j = 0; j < size; j++)
            {
                cout << original[j] << " ";
            }
            cout << std::endl;
            cout << "Output: ";
            for (int j = 0; j < size; j++)
            {
                cout << input[j] << " ";
            }
            cout << endl
                 << endl;
        }
        else
        { // if the array wasn't sorted properly
            cout << "Test Case No. : " << i << " and "
                 << "Size of array is: " << size << " and this Test Failed" << endl;
            cout << "Input: ";
            for (int j = 0; j < size; j++)
            {
                cout << original[j] << " ";
            }
            cout << std::endl;
            cout << "Output: ";
            for (int j = 0; j < size; j++)
            {
                cout << input[j] << " ";
            }
            cout << endl
                 << endl;
        }
    }

    return 0;
}
